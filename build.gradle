plugins {
    id "org.jetbrains.kotlin.jvm" version "1.2.21"
}

group = 'com.anaplan.engineering'
version = '2.6.3-SNAPSHOT'

apply plugin: 'groovy'
apply plugin: 'kotlin'
apply plugin: 'java-gradle-plugin'
apply plugin: 'maven-publish'

// compile Groovy code before Kotlin and make it available
compileGroovy.dependsOn = compileGroovy.taskDependencies.values - 'compileJava'
compileKotlin.dependsOn compileGroovy
compileKotlin.classpath += files(compileGroovy.destinationDir)
classes.dependsOn compileKotlin

ext {
    kotlinVersion = "1.2.21"
    overtureVersion = project.version
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    compile gradleApi()
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: kotlinVersion
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: kotlinVersion

    compile group: 'org.overturetool.core', name: 'interpreter', version: overtureVersion

    compile group: 'com.anaplan.engineering', name: 'vdm-pretty-printer', version: overtureVersion

    compile group: 'com.atlassian.commonmark', name: 'commonmark', version: '0.11.0'
    compile group: 'com.atlassian.commonmark', name: 'commonmark-ext-gfm-tables', version:'0.9.0'

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'com.nhaarman', name: 'mockito-kotlin', version: '1.5.0'
}

sourceSets {
    functionalTest {
        kotlin {
            srcDir { 'src/test-fn/kotlin' }
        }
        resources {
            srcDir { 'src/test-fn/resources' }
        }
        compileClasspath += sourceSets.main.output + configurations.testRuntime
        runtimeClasspath += output + compileClasspath
    }
}

task functionalTest(type: Test) {
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    description = 'Runs the functional tests.'
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    outputs.upToDateWhen { false }
    mustRunAfter test
}

check {
    dependsOn functionalTest
}

gradlePlugin {
    plugins {
        vdm {
            id = "vdm"
            implementationClass = "com.anaplan.engineering.vdmgradleplugin.VdmGradlePlugin"
        }
    }
}


