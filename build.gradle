plugins {
    id "org.jetbrains.kotlin.jvm" version "1.3.50"
}

group = 'com.anaplan.engineering'
version = '2.6.4.18'

apply plugin: 'kotlin'
apply plugin: 'java-gradle-plugin'
apply plugin: 'maven-publish'

ext {
    kotlinVersion = "1.3.50"
    overtureVersion = "2.6.4"
}

repositories {
    jcenter()
}

sourceSets {
    functionalTest {
        kotlin.srcDir 'src/test-fn/kotlin'
        resources.srcDir 'src/test-fn/resources'
    }
}

task functionalTestClasspathJar(type: Jar) {
    inputs.files(sourceSets.test.runtimeClasspath)
            .withPropertyName("runtimeClasspath")
            .withNormalizer(ClasspathNormalizer)
    archiveName = "functionalTestClasspath.jar"
    doFirst {
        manifest {
            def classpath = sourceSets.test.runtimeClasspath.files
            attributes "Class-Path": classpath.collect { f -> f.toURI().toString() }.join(" ")
        }
    }
}

configurations {
    functionalTestImplementation.extendsFrom testImplementation
}

dependencies {
    implementation gradleApi()
    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: kotlinVersion
    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: kotlinVersion
    implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-html-jvm', version: '0.6.10'

    implementation group: 'org.overturetool.core', name: 'interpreter', version: overtureVersion

    implementation group: 'com.anaplan.engineering', name: 'vdm-pretty-printer', version: overtureVersion

    implementation group: 'com.atlassian.commonmark', name: 'commonmark', version: '0.11.0'
    implementation group: 'com.atlassian.commonmark', name: 'commonmark-ext-gfm-tables', version: '0.9.0'

    implementation group: 'com.xenomachina', name: 'kotlin-argparser', version: '2.0.7'

    testImplementation group: 'junit', name: 'junit', version: '4.12'
    testImplementation group: 'com.nhaarman', name: 'mockito-kotlin', version: '1.5.0'

    functionalTestImplementation gradleTestKit()
}


task functionalTest(type: Test) {
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    systemProperty "functionalTestClasspathJar", functionalTestClasspathJar.archivePath.absolutePath
    outputs.upToDateWhen { false }
    mustRunAfter test
    dependsOn functionalTestClasspathJar
}

check.dependsOn functionalTest

gradlePlugin {
    plugins {
        vdm {
            id = "vdm"
            implementationClass = "com.anaplan.engineering.vdmgradleplugin.VdmGradlePlugin"
        }
    }
}


// Using artifactory plugin appears broken -- https://github.com/gradle/gradle/issues/4783

//plugins {
//    id "com.jfrog.artifactory" version "4.18.0"
//}
//
//apply plugin: 'com.jfrog.artifactory'
//
//artifactory {
//    contextUrl = findProperty('ART_URL')
//    publish {
//        repository {
//            repoKey = findProperty('ART_REPO')
//            username = System.env.ART_USERNAME 
//            password = System.env.ART_PASSWORD 
//        }
//        defaults {
//            publications('pluginMaven', 'vdmPluginMarkerMaven')
//            publishPom = true
//            publishIvy = false
//        }
//    }
//}
//
//

publishing {
    repositories {
        maven {
            credentials {
                username System.env.ART_USERNAME
                password System.env.ART_PASSWORD
            }
            url findProperty('ART_URL')
        }
    }
}
